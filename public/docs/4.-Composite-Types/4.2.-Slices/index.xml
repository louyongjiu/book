<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>4.2. Slice on Book</title>
    <link>https://book.ninescloud.com/docs/4.-Composite-Types/4.2.-Slices/</link>
    <description>Recent content in 4.2. Slice on Book</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://book.ninescloud.com/docs/4.-Composite-Types/4.2.-Slices/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4.2.1. append函数</title>
      <link>https://book.ninescloud.com/docs/4.-Composite-Types/4.2.-Slices/4.2.1-The-append-Function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/4.-Composite-Types/4.2.-Slices/4.2.1-The-append-Function/</guid>
      <description>4.2.1. append函数 #  内置的append函数用于向slice追加元素：
var runes []rune for _, r := range &amp;#34;Hello, 世界&amp;#34; { runes = append(runes, r) } fmt.Printf(&amp;#34;%q\n&amp;#34;, runes) // &amp;#34;[&amp;#39;H&amp;#39; &amp;#39;e&amp;#39; &amp;#39;l&amp;#39; &amp;#39;l&amp;#39; &amp;#39;o&amp;#39; &amp;#39;,&amp;#39; &amp;#39; &amp;#39; &amp;#39;世&amp;#39; &amp;#39;界&amp;#39;]&amp;#34; 在循环中使用append函数构建一个由九个rune字符构成的slice，当然对应这个特殊的问题我们可以通过Go语言内置的[]rune(&amp;ldquo;Hello, 世界&amp;rdquo;)转换操作完成。
append函数对于理解slice底层是如何工作的非常重要，所以让我们仔细查看究竟是发生了什么。下面是第一个版本的appendInt函数，专门用于处理[]int类型的slice：
gopl.io/ch4/append
func appendInt(x []int, y int) []int { var z []int zlen := len(x) + 1 if zlen &amp;lt;= cap(x) { // There is room to grow. Extend the slice. 	z = x[:zlen] } else { // There is insufficient space.</description>
    </item>
    
    <item>
      <title>4.2.2. Slice内存技巧</title>
      <link>https://book.ninescloud.com/docs/4.-Composite-Types/4.2.-Slices/4.2.2-In-Place-Slice-Techniques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/4.-Composite-Types/4.2.-Slices/4.2.2-In-Place-Slice-Techniques/</guid>
      <description>4.2.2. Slice内存技巧 #  让我们看看更多的例子，比如旋转slice、反转slice或在slice原有内存空间修改元素。给定一个字符串列表，下面的nonempty函数将在原有slice内存空间之上返回不包含空字符串的列表：
gopl.io/ch4/nonempty
// Nonempty is an example of an in-place slice algorithm. package main import &amp;#34;fmt&amp;#34; // nonempty returns a slice holding only the non-empty strings. // The underlying array is modified during the call. func nonempty(strings []string) []string { i := 0 for _, s := range strings { if s != &amp;#34;&amp;#34; { strings[i] = s i++ } } return strings[:i] } 比较微妙的地方是，输入的slice和输出的slice共享一个底层数组。这可以避免分配另一个数组，不过原来的数据将可能会被覆盖，正如下面两个打印语句看到的那样：
data := []string{&amp;#34;one&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;three&amp;#34;} fmt.</description>
    </item>
    
  </channel>
</rss>