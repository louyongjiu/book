<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2. 有意义的命名 on Book</title>
    <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/</link>
    <description>Recent content in 2. 有意义的命名 on Book</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2.1. 介绍</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.1.-Introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.1.-Introduction/</guid>
      <description>2.1 介绍 #  Names are everywhere in software. We name our variables, our functions, our arguments, classes, and packages. We name our source files and the directories that contain them. We name our jar files and war files and ear files. We name and name and name. Because we do so much of it, we’d better do it well. What follows are some simple rules for creating good names.</description>
    </item>
    
    <item>
      <title>2.2. 名副其实</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.2.-Use-Intention-Revealing-Names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.2.-Use-Intention-Revealing-Names/</guid>
      <description>2.2 名副其实 #  It is easy to say that names should reveal intent. What we want to impress upon you is that we are serious about this. Choosing good names takes time but saves more than it takes. So take care with your names and change them when you find better ones. Everyone who reads your code (including you) will be happier if you do.
 名副其实说起来简单。我们想要强调，这事很严肃。选个好名字要花时间，但省下来的时间比花掉的多。注意命名，而且一旦发现有更好的名称，就换掉旧的。这么做，读你代码的人（包括你自己）都会更开心。
 The name of a variable, function, or class, should answer all the big questions.</description>
    </item>
    
    <item>
      <title>2.3. 避免误导</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.3.-Avoid-Disinformation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.3.-Avoid-Disinformation/</guid>
      <description>2.3 避免误导 #  Programmers must avoid leaving false clues that obscure the meaning of code. We should avoid words whose entrenched meanings vary from our intended meaning. For example, hp, aix, and sco would be poor variable names because they are the names of Unix platforms or variants. Even if you are coding a hypotenuse and hp looks like a good abbreviation, it could be disinformative.
 程序员必须避免留下掩藏代码本意的错误线索。应当避免使用与本意相悖的词。例如，hp、aix 和 sco 都不该用做变量名，因为它们都是 UNIX 平台或类 UNIX 平台的专有名称。即便你是在编写三角计算程序， hp 看起来是个不错的缩写，但那也可能会提供错误信息。</description>
    </item>
    
    <item>
      <title>2.4. 做有意义的区分</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.4.-Make-Meaningful-Distinctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.4.-Make-Meaningful-Distinctions/</guid>
      <description>2.4 做有意义的区分 #   Programmers create problems for themselves when they write code solely to satisfy a compiler or interpreter. For example, because you can’t use the same name to refer to two different things in the same scope, you might be tempted to change one name in an arbitrary way. Sometimes this is done by misspelling one, leading to the surprising situation where correcting spelling errors leads to an inability to compile.</description>
    </item>
    
    <item>
      <title>2.5. 使用读得出来的名称</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.5.-Use-Pronounceable-Names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.5.-Use-Pronounceable-Names/</guid>
      <description>2.5 使用读得出来的名称 #  Humans are good at words. A significant part of our brains is dedicated to the concept of words. And words are, by definition, pronounceable. It would be a shame not to take advantage of that huge portion of our brains that has evolved to deal with spoken language. So make your names pronounceable.
 人类长于记忆和使用单词。大脑的相当一部分就是用来容纳和处理单词的。单词能读得出来。人类进化到大脑中有那么大的一块地方用来处理言语，若不善加利用，实在是种耻辱。
 If you can’t pronounce it, you can’t discuss it without sounding like an idiot.</description>
    </item>
    
    <item>
      <title>2.6. 使用可搜索的名称</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.6.-Use-Searchable-Names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.6.-Use-Searchable-Names/</guid>
      <description>2.6 使用可搜索的名称 #  Single-letter names and numeric constants have a particular problem in that they are not easy to locate across a body of text.
 单字母名称和数字常量有个问题，就是很难在一大篇文字中找出来。
 One might easily grep for MAX_CLASSES_PER_STUDENT, but the number 7 could be more troublesome. Searches may turn up the digit as part of file names, other constant definitions, and in various expressions where the value is used with different intent. It is even worse when a constant is a long number and someone might have transposed digits, thereby creating a bug while simultaneously evading the programmer’s search.</description>
    </item>
    
    <item>
      <title>2.7. 避免使用编码</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.7.-Avoid-Encodings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.7.-Avoid-Encodings/</guid>
      <description>2.7 避免使用编码 #  We have enough encodings to deal with without adding more to our burden. Encoding type or scope information into names simply adds an extra burden of deciphering. It hardly seems reasonable to require each new employee to learn yet another encoding “language” in addition to learning the (usually considerable) body of code that they’ll be working in. It is an unnecessary mental burden when trying to solve a problem.</description>
    </item>
    
    <item>
      <title>2.8. 避免思维映射</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.8.-Avoid-Mental-Mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.8.-Avoid-Mental-Mapping/</guid>
      <description>2.8 避免思维映射 #  Readers shouldn’t have to mentally translate your names into other names they already know. This problem generally arises from a choice to use neither problem domain terms nor solution domain terms.
 不应当让读者在脑中把你的名称翻译为他们熟知的名称。这种问题经常出现在选择是使用问题领域术语还是解决方案领域术语时。
 This is a problem with single-letter variable names. Certainly a loop counter may be named i or j or k (though never l!) if its scope is very small and no other names can conflict with it.</description>
    </item>
    
    <item>
      <title>2.9. 类名</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.9.-Class-Names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.9.-Class-Names/</guid>
      <description>2.9 类名 #  Classes and objects should have noun or noun phrase names like Customer, WikiPage, Account, and AddressParser. Avoid words like Manager, Processor, Data, or Info in the name of a class. A class name should not be a verb.
 类名和对象名应该是名词或名词短语，如 Customer、WikiPage、Account 和 AddressParser。避免使用 Manager、Processor、Data 或 Info 这样的类名。类名不应当是动词。
 </description>
    </item>
    
    <item>
      <title>2.10. 方法名</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.10.-Method-Names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.10.-Method-Names/</guid>
      <description>2.10 方法名 #  Methods should have verb or verb phrase names like postPayment, deletePage, or save. Accessors, mutators, and predicates should be named for their value and prefixed with get, set, and is according to the javabean standard.4
 方法名应当是动词或动词短语，如 postPayment、deletePage 或 save。属性访问器、修改器和断言应该根据其值命名，并依 Javabean 标准加上 get、set 和 is 前缀。
 string name = employee.getName(); customer.setName(&amp;#34;mike&amp;#34;); if (paycheck.isPosted())… When constructors are overloaded, use static factory methods with names that describe the arguments.</description>
    </item>
    
    <item>
      <title>2.11. 别扮可爱</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.11.-Dont-Be-Cute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.11.-Dont-Be-Cute/</guid>
      <description>2.11 别扮可爱 #  If names are too clever, they will be memorable only to people who share the author’s sense of humor, and only as long as these people remember the joke. Will they know what the function named HolyHandGrenade is supposed to do? Sure, it’s cute, but maybe in this case DeleteItems might be a better name. Choose clarity over entertainment value.
 如果名称太耍宝，那就只有同作者一般有幽默感的人才能记得住，而且还是在他们记得那个笑话的时候才行。谁会知道名为 HolyHandGrenade 的函数是用来做什么的呢？没错，这名字挺伶俐，不过 DeleteItems 或许是更好的名称。宁可明确，毋为好玩。</description>
    </item>
    
    <item>
      <title>2.12. 每个概念对应一个词</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.12.-Pick-One-Word-per-Concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.12.-Pick-One-Word-per-Concept/</guid>
      <description>2.12 每个概念对应一个词 #  Pick one word for one abstract concept and stick with it. For instance, it’s confusing to have fetch, retrieve, and get as equivalent methods of different classes. How do you remember which method name goes with which class? Sadly, you often have to remember which company, group, or individual wrote the library or class in order to remember which term was used. Otherwise, you spend an awful lot of time browsing through headers and previous code samples.</description>
    </item>
    
    <item>
      <title>2.13. 别用双关语</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.13.-Dont-Pun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.13.-Dont-Pun/</guid>
      <description>2.13 别用双关语 #  Avoid using the same word for two purposes. Using the same term for two different ideas is essentially a pun.
 避免将同一单词用于不同目的。同一术语用于不同概念，基本上就是双关语了。
 If you follow the “one word per concept” rule, you could end up with many classes that have, for example, an add method. As long as the parameter lists and return values of the various add methods are semantically equivalent, all is well.</description>
    </item>
    
    <item>
      <title>2.14. 使用解决方案领域名称</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.14.-Use-Solution-Domain-Names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.14.-Use-Solution-Domain-Names/</guid>
      <description>2.14 使用解决方案领域名称 #  Remember that the people who read your code will be programmers. So go ahead and use computer science (CS) terms, algorithm names, pattern names, math terms, and so forth. It is not wise to draw every name from the problem domain because we don’t want our coworkers to have to run back and forth to the customer asking what every name means when they already know the concept by a different name.</description>
    </item>
    
    <item>
      <title>2.15. 使用源自所涉问题领域的名称</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.15.-Use-Problem-Domain-Names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.15.-Use-Problem-Domain-Names/</guid>
      <description>2.15 使用源自所涉问题领域的名称 #  When there is no “programmer-eese” for what you’re doing, use the name from the problem domain. At least the programmer who maintains your code can ask a domain expert what it means.
 如果不能用程序员熟悉的术语来给手头的工作命名，就采用从所涉问题领域而来的名称吧。至少，负责维护代码的程序员就能去请教领域专家了。
 Separating solution and problem domain concepts is part of the job of a good programmer and designer. The code that has more to do with problem domain concepts should have names drawn from the problem domain.</description>
    </item>
    
    <item>
      <title>2.16. 添加有意义的语境</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.16.-Add-Meaningful-Context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.16.-Add-Meaningful-Context/</guid>
      <description>2.16 添加有意义的语境 #  There are a few names which are meaningful in and of themselves—most are not. Instead, you need to place names in context for your reader by enclosing them in well-named classes, functions, or namespaces. When all else fails, then prefixing the name may be necessary as a last resort.
 很少有名称是能自我说明的——多数都不能。反之，你需要用有良好命名的类、函数或名称空间来放置名称，给读者提供语境。如果没这么做，给名称添加前缀就是最后一招了。
 Imagine that you have variables named firstName, lastName, street, houseNumber, city, state, and zipcode. Taken together it’s pretty clear that they form an address.</description>
    </item>
    
    <item>
      <title>2.17. 不要添加没用的语境</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.17.-Dont-Add-Gratuitous-Context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.17.-Dont-Add-Gratuitous-Context/</guid>
      <description>2.17 不要添加没用的语境 #  In an imaginary application called “Gas Station Deluxe,” it is a bad idea to prefix every class with GSD. Frankly, you are working against your tools. You type G and press the completion key and are rewarded with a mile-long list of every class in the system. Is that wise? Why make it hard for the IDE to help you?
 设若有一个名为“加油站豪华版”（Gas Station Deluxe）的应用，在其中给每个类添加 GSD 前缀就不是什么好点子。说白了，你是在和自己在用的工具过不去。输入 G，按下自动完成键，结果会得到系统中全部类的列表，列表恨不得有一英里那么长。这样做聪明吗？为什么要搞得 IDE 没法帮助你？</description>
    </item>
    
    <item>
      <title>2.18. 最后的话</title>
      <link>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.18.-Final-Words/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/Clean-Code/2.-Meaningful-Names/2.18.-Final-Words/</guid>
      <description>2.18 最后的话 #  The hardest thing about choosing good names is that it requires good descriptive skills and a shared cultural background. This is a teaching issue rather than a technical, business, or management issue. As a result many people in this field don’t learn to do it very well.
 取好名字最难的地方在于需要良好的描述技巧和共有文化背景。与其说这是一种技术、商业或管理问题，还不如说是一种教学问题。其结果是，这个领域内的许多人都没能学会做得很好。
 People are also afraid of renaming things for fear that some other developers will object. We do not share that fear and find that we are actually grateful when names change (for the better).</description>
    </item>
    
  </channel>
</rss>