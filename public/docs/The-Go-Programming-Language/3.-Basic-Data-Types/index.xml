<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3. 基础数据类型 on Book</title>
    <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/3.-Basic-Data-Types/</link>
    <description>Recent content in 3. 基础数据类型 on Book</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://book.ninescloud.com/docs/The-Go-Programming-Language/3.-Basic-Data-Types/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>3.1. 整型</title>
      <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/3.-Basic-Data-Types/3.1.-Integers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/The-Go-Programming-Language/3.-Basic-Data-Types/3.1.-Integers/</guid>
      <description>3.1. 整型 #  Go语言的数值类型包括几种不同大小的整数、浮点数和复数。每种数值类型都决定了对应的大小范围和是否支持正负符号。让我们先从整数类型开始介绍。
Go语言同时提供了有符号和无符号类型的整数运算。这里有int8、int16、int32和int64四种截然不同大小的有符号整数类型，分别对应8、16、32、64bit大小的有符号整数，与此对应的是uint8、uint16、uint32和uint64四种无符号整数类型。
这里还有两种一般对应特定CPU平台机器字大小的有符号和无符号整数int和uint；其中int是应用最广泛的数值类型。这两种类型都有同样的大小，32或64bit，但是我们不能对此做任何的假设；因为不同的编译器即使在相同的硬件平台上可能产生不同的大小。
Unicode字符rune类型是和int32等价的类型，通常用于表示一个Unicode码点。这两个名称可以互换使用。同样byte也是uint8类型的等价类型，byte类型一般用于强调数值是一个原始的数据而不是一个小的整数。
最后，还有一种无符号的整数类型uintptr，没有指定具体的bit大小但是足以容纳指针。uintptr类型只有在底层编程时才需要，特别是Go语言和C语言函数库或操作系统接口相交互的地方。我们将在第十三章的unsafe包相关部分看到类似的例子。
不管它们的具体大小，int、uint和uintptr是不同类型的兄弟类型。其中int和int32也是不同的类型，即使int的大小也是32bit，在需要将int当作int32类型的地方需要一个显式的类型转换操作，反之亦然。
其中有符号整数采用2的补码形式表示，也就是最高bit位用来表示符号位，一个n-bit的有符号数的值域是从$-2^{n-1}$到$2^{n-1}-1$。无符号整数的所有bit位都用于表示非负数，值域是0到$2^n-1$。例如，int8类型整数的值域是从-128到127，而uint8类型整数的值域是从0到255。
下面是Go语言中关于算术运算、逻辑运算和比较运算的二元运算符，它们按照优先级递减的顺序排列：
* / % &amp;lt;&amp;lt; &amp;gt;&amp;gt; &amp;amp; &amp;amp;^ + - | ^ == != &amp;lt; &amp;lt;= &amp;gt; &amp;gt;= &amp;amp;&amp;amp; || 二元运算符有五种优先级。在同一个优先级，使用左优先结合规则，但是使用括号可以明确优先顺序，使用括号也可以用于提升优先级，例如mask &amp;amp; (1 &amp;lt;&amp;lt; 28)。
对于上表中前两行的运算符，例如+运算符还有一个与赋值相结合的对应运算符+=，可以用于简化赋值语句。
算术运算符+、-、*和/可以适用于整数、浮点数和复数，但是取模运算符%仅用于整数间的运算。对于不同编程语言，%取模运算的行为可能并不相同。在Go语言中，%取模运算符的符号和被取模数的符号总是一致的，因此-5%3和-5%-3结果都是-2。除法运算符/的行为则依赖于操作数是否全为整数，比如5.0/4.0的结果是1.25，但是5/4的结果是1，因为整数除法会向着0方向截断余数。
一个算术运算的结果，不管是有符号或者是无符号的，如果需要更多的bit位才能正确表示的话，就说明计算结果是溢出了。超出的高位的bit位部分将被丢弃。如果原始的数值是有符号类型，而且最左边的bit位是1的话，那么最终结果可能是负的，例如int8的例子：
var u uint8 = 255 fmt.Println(u, u+1, u*u) // &amp;#34;255 0 1&amp;#34;  var i int8 = 127 fmt.Println(i, i+1, i*i) // &amp;#34;127 -128 1&amp;#34; 两个相同的整数类型可以使用下面的二元比较运算符进行比较；比较表达式的结果是布尔类型。
== 等于 != 不等于 &amp;lt; 小于 &amp;lt;= 小于等于 &amp;gt; 大于 &amp;gt;= 大于等于 事实上，布尔型、数字类型和字符串等基本类型都是可比较的，也就是说两个相同类型的值可以用==和!</description>
    </item>
    
    <item>
      <title>3.2. 浮点数</title>
      <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/3.-Basic-Data-Types/3.2.-Floating-Point-Numbers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/The-Go-Programming-Language/3.-Basic-Data-Types/3.2.-Floating-Point-Numbers/</guid>
      <description>3.2. 浮点数 #  Go语言提供了两种精度的浮点数，float32和float64。它们的算术规范由IEEE754浮点数国际标准定义，该浮点数规范被所有现代的CPU支持。
这些浮点数类型的取值范围可以从很微小到很巨大。浮点数的范围极限值可以在math包找到。常量math.MaxFloat32表示float32能表示的最大数值，大约是 3.4e38；对应的math.MaxFloat64常量大约是1.8e308。它们分别能表示的最小值近似为1.4e-45和4.9e-324。
一个float32类型的浮点数可以提供大约6个十进制数的精度，而float64则可以提供约15个十进制数的精度；通常应该优先使用float64类型，因为float32类型的累计计算误差很容易扩散，并且float32能精确表示的正整数并不是很大（译注：因为float32的有效bit位只有23个，其它的bit位用于指数和符号；当整数大于23bit能表达的范围时，float32的表示将出现误差）：
var f float32 = 16777216 // 1 &amp;lt;&amp;lt; 24 fmt.Println(f == f+1) // &amp;#34;true&amp;#34;! 浮点数的字面值可以直接写小数部分，像这样：
const e = 2.71828 // (approximately) 小数点前面或后面的数字都可能被省略（例如.707或1.）。很小或很大的数最好用科学计数法书写，通过e或E来指定指数部分：
const Avogadro = 6.02214129e23 // 阿伏伽德罗常数 const Planck = 6.62606957e-34 // 普朗克常数 用Printf函数的%g参数打印浮点数，将采用更紧凑的表示形式打印，并提供足够的精度，但是对应表格的数据，使用%e（带指数）或%f的形式打印可能更合适。所有的这三个打印形式都可以指定打印的宽度和控制打印精度。
for x := 0; x &amp;lt; 8; x++ { fmt.Printf(&amp;#34;x = %d e^x = %8.3f\n&amp;#34;, x, math.Exp(float64(x))) } 上面代码打印e的幂，打印精度是小数点后三个小数精度和8个字符宽度：
x = 0 e^x = 1.000 x = 1 e^x = 2.</description>
    </item>
    
    <item>
      <title>3.3. 复数</title>
      <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/3.-Basic-Data-Types/3.3.-Complex-Numbers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/The-Go-Programming-Language/3.-Basic-Data-Types/3.3.-Complex-Numbers/</guid>
      <description>3.3. 复数 #  Go语言提供了两种精度的复数类型：complex64和complex128，分别对应float32和float64两种浮点数精度。内置的complex函数用于构建复数，内建的real和imag函数分别返回复数的实部和虚部：
var x complex128 = complex(1, 2) // 1+2i var y complex128 = complex(3, 4) // 3+4i fmt.Println(x*y) // &amp;#34;(-5+10i)&amp;#34; fmt.Println(real(x*y)) // &amp;#34;-5&amp;#34; fmt.Println(imag(x*y)) // &amp;#34;10&amp;#34; 如果一个浮点数面值或一个十进制整数面值后面跟着一个i，例如3.141592i或2i，它将构成一个复数的虚部，复数的实部是0：
fmt.Println(1i * 1i) // &amp;#34;(-1+0i)&amp;#34;, i^2 = -1 在常量算术规则下，一个复数常量可以加到另一个普通数值常量（整数或浮点数、实部或虚部），我们可以用自然的方式书写复数，就像1+2i或与之等价的写法2i+1。上面x和y的声明语句还可以简化：
x := 1 + 2i y := 3 + 4i 复数也可以用==和!=进行相等比较。只有两个复数的实部和虚部都相等的时候它们才是相等的（译注：浮点数的相等比较是危险的，需要特别小心处理精度问题）。
math/cmplx包提供了复数处理的许多函数，例如求复数的平方根函数和求幂函数。
fmt.Println(cmplx.Sqrt(-1)) // &amp;#34;(0+1i)&amp;#34; 下面的程序使用complex128复数算法来生成一个Mandelbrot图像。
gopl.io/ch3/mandelbrot
// Mandelbrot emits a PNG image of the Mandelbrot fractal. package main import ( &amp;#34;image&amp;#34; &amp;#34;image/color&amp;#34; &amp;#34;image/png&amp;#34; &amp;#34;math/cmplx&amp;#34; &amp;#34;os&amp;#34; ) func main() { const ( xmin, ymin, xmax, ymax = -2, -2, +2, +2 width, height = 1024, 1024 ) img := image.</description>
    </item>
    
    <item>
      <title>3.4. 布尔型</title>
      <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/3.-Basic-Data-Types/3.4.-Booleans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/The-Go-Programming-Language/3.-Basic-Data-Types/3.4.-Booleans/</guid>
      <description>3.4. 布尔型 #  一个布尔类型的值只有两种：true和false。if和for语句的条件部分都是布尔类型的值，并且==和&amp;lt;等比较操作也会产生布尔型的值。一元操作符!对应逻辑非操作，因此!true的值为false，更罗嗦的说法是(!true==false)==true，虽然表达方式不一样，不过我们一般会采用简洁的布尔表达式，就像用x来表示x==true。
布尔值可以和&amp;amp;&amp;amp;（AND）和||（OR）操作符结合，并且有短路行为：如果运算符左边值已经可以确定整个布尔表达式的值，那么运算符右边的值将不再被求值，因此下面的表达式总是安全的：
s != &amp;#34;&amp;#34; &amp;amp;&amp;amp; s[0] == &amp;#39;x&amp;#39; 其中s[0]操作如果应用于空字符串将会导致panic异常。
因为&amp;amp;&amp;amp;的优先级比||高（助记：&amp;amp;&amp;amp;对应逻辑乘法，||对应逻辑加法，乘法比加法优先级要高），下面形式的布尔表达式是不需要加小括弧的：
if &amp;#39;a&amp;#39; &amp;lt;= c &amp;amp;&amp;amp; c &amp;lt;= &amp;#39;z&amp;#39; || &amp;#39;A&amp;#39; &amp;lt;= c &amp;amp;&amp;amp; c &amp;lt;= &amp;#39;Z&amp;#39; || &amp;#39;0&amp;#39; &amp;lt;= c &amp;amp;&amp;amp; c &amp;lt;= &amp;#39;9&amp;#39; { // ...ASCII letter or digit... } 布尔值并不会隐式转换为数字值0或1，反之亦然。必须使用一个显式的if语句辅助转换：
i := 0 if b { i = 1 } 如果需要经常做类似的转换，包装成一个函数会更方便：
// btoi returns 1 if b is true and 0 if false. func btoi(b bool) int { if b { return 1 } return 0 } 数字到布尔型的逆转换则非常简单，不过为了保持对称，我们也可以包装一个函数：</description>
    </item>
    
  </channel>
</rss>