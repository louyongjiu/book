<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>5. 函数 on Book</title>
    <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/</link>
    <description>Recent content in 5. 函数 on Book</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>5.1. 函数声明</title>
      <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.1.-Function-Declarations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.1.-Function-Declarations/</guid>
      <description>5.1. 函数声明 #  函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体。
func name(parameter-list) (result-list) { body } 形式参数列表描述了函数的参数名以及参数类型。这些参数作为局部变量，其值由参数调用者提供。返回值列表描述了函数返回值的变量名以及类型。如果函数返回一个无名变量或者没有返回值，返回值列表的括号是可以省略的。如果一个函数声明不包括返回值列表，那么函数体执行完毕后，不会返回任何值。在hypot函数中：
func hypot(x, y float64) float64 { return math.Sqrt(x*x + y*y) } fmt.Println(hypot(3,4)) // &amp;#34;5&amp;#34; x和y是形参名，3和4是调用时的传入的实参，函数返回了一个float64类型的值。 返回值也可以像形式参数一样被命名。在这种情况下，每个返回值被声明成一个局部变量，并根据该返回值的类型，将其初始化为该类型的零值。 如果一个函数在声明时，包含返回值列表，该函数必须以 return语句结尾，除非函数明显无法运行到结尾处。例如函数在结尾时调用了panic异常或函数中存在无限循环。
正如hypot一样，如果一组形参或返回值有相同的类型，我们不必为每个形参都写出参数类型。下面2个声明是等价的：
func f(i, j, k int, s, t string) { /* ... */ } func f(i int, j int, k int, s string, t string) { /* ... */ } 下面，我们给出4种方法声明拥有2个int型参数和1个int型返回值的函数.blank identifier(译者注：即下文的_符号)可以强调某个参数未被使用。
func add(x int, y int) int {return x + y} func sub(x, y int) (z int) { z = x - y; return} func first(x int, _ int) int { return x } func zero(int, int) int { return 0 } fmt.</description>
    </item>
    
    <item>
      <title>5.2. 递归</title>
      <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.2.-Recursion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.2.-Recursion/</guid>
      <description>5.2. 递归 #  函数可以是递归的，这意味着函数可以直接或间接的调用自身。对许多问题而言，递归是一种强有力的技术，例如处理递归的数据结构。在4.4节，我们通过遍历二叉树来实现简单的插入排序，在本章节，我们再次使用它来处理HTML文件。
下文的示例代码使用了非标准包 golang.org/x/net/html ，解析HTML。golang.org/x/&amp;hellip; 目录下存储了一些由Go团队设计、维护，对网络编程、国际化文件处理、移动平台、图像处理、加密解密、开发者工具提供支持的扩展包。未将这些扩展包加入到标准库原因有二，一是部分包仍在开发中，二是对大多数Go语言的开发者而言，扩展包提供的功能很少被使用。
例子中调用golang.org/x/net/html的部分api如下所示。html.Parse函数读入一组bytes解析后，返回html.Node类型的HTML页面树状结构根节点。HTML拥有很多类型的结点如text（文本）、commnets（注释）类型，在下面的例子中，我们 只关注&amp;lt; name key=&#39;value&amp;rsquo; &amp;gt;形式的结点。
golang.org/x/net/html
package html type Node struct { Type NodeType Data string Attr []Attribute FirstChild, NextSibling *Node } type NodeType int32 const ( ErrorNode NodeType = iota TextNode DocumentNode ElementNode CommentNode DoctypeNode ) type Attribute struct { Key, Val string } func Parse(r io.Reader) (*Node, error) main函数解析HTML标准输入，通过递归函数visit获得links（链接），并打印出这些links：
gopl.io/ch5/findlinks1
// Findlinks1 prints the links in an HTML document read from standard input.</description>
    </item>
    
    <item>
      <title>5.3. 多返回值</title>
      <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.3.-Multiple-Return-Values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.3.-Multiple-Return-Values/</guid>
      <description>5.3. 多返回值 #  在Go中，一个函数可以返回多个值。我们已经在之前例子中看到，许多标准库中的函数返回2个值，一个是期望得到的返回值，另一个是函数出错时的错误信息。下面的例子会展示如何编写多返回值的函数。
下面的程序是findlinks的改进版本。修改后的findlinks可以自己发起HTTP请求，这样我们就不必再运行fetch。因为HTTP请求和解析操作可能会失败，因此findlinks声明了2个返回值：链接列表和错误信息。一般而言，HTML的解析器可以处理HTML页面的错误结点，构造出HTML页面结构，所以解析HTML很少失败。这意味着如果findlinks函数失败了，很可能是由于I/O的错误导致的。
gopl.io/ch5/findlinks2
func main() { for _, url := range os.Args[1:] { links, err := findLinks(url) if err != nil { fmt.Fprintf(os.Stderr, &amp;#34;findlinks2: %v\n&amp;#34;, err) continue } for _, link := range links { fmt.Println(link) } } } // findLinks performs an HTTP GET request for url, parses the // response as HTML, and extracts and returns the links. func findLinks(url string) ([]string, error) { resp, err := http.</description>
    </item>
    
    <item>
      <title>5.5. 函数值</title>
      <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.5.-Function-Values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.5.-Function-Values/</guid>
      <description>5.5. 函数值 #  在Go中，函数被看作第一类值（first-class values）：函数像其他值一样，拥有类型，可以被赋值给其他变量，传递给函数，从函数返回。对函数值（function value）的调用类似函数调用。例子如下：
func square(n int) int { return n * n } func negative(n int) int { return -n } func product(m, n int) int { return m * n } f := square fmt.Println(f(3)) // &amp;#34;9&amp;#34;  f = negative fmt.Println(f(3)) // &amp;#34;-3&amp;#34; 	fmt.Printf(&amp;#34;%T\n&amp;#34;, f) // &amp;#34;func(int) int&amp;#34;  f = product // compile error: can&amp;#39;t assign func(int, int) int to func(int) int 函数类型的零值是nil。调用值为nil的函数值会引起panic错误：</description>
    </item>
    
    <item>
      <title>5.7. 可变参数</title>
      <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.7.-Variadic-Functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.7.-Variadic-Functions/</guid>
      <description>5.7. 可变参数 #  参数数量可变的函数称为可变参数函数。典型的例子就是fmt.Printf和类似函数。Printf首先接收一个必备的参数，之后接收任意个数的后续参数。
在声明可变参数函数时，需要在参数列表的最后一个参数类型之前加上省略符号“&amp;hellip;”，这表示该函数会接收任意数量的该类型参数。
gopl.io/ch5/sum
func sum(vals ...int) int { total := 0 for _, val := range vals { total += val } return total } sum函数返回任意个int型参数的和。在函数体中，vals被看作是类型为[] int的切片。sum可以接收任意数量的int型参数：
fmt.Println(sum()) // &amp;#34;0&amp;#34; fmt.Println(sum(3)) // &amp;#34;3&amp;#34; fmt.Println(sum(1, 2, 3, 4)) // &amp;#34;10&amp;#34; 在上面的代码中，调用者隐式的创建一个数组，并将原始参数复制到数组中，再把数组的一个切片作为参数传给被调用函数。如果原始参数已经是切片类型，我们该如何传递给sum？只需在最后一个参数后加上省略符。下面的代码功能与上个例子中最后一条语句相同。
values := []int{1, 2, 3, 4} fmt.Println(sum(values...)) // &amp;#34;10&amp;#34; 虽然在可变参数函数内部，&amp;hellip;int 型参数的行为看起来很像切片类型，但实际上，可变参数函数和以切片作为参数的函数是不同的。
func f(...int) {} func g([]int) {} fmt.Printf(&amp;#34;%T\n&amp;#34;, f) // &amp;#34;func(...int)&amp;#34; fmt.Printf(&amp;#34;%T\n&amp;#34;, g) // &amp;#34;func([]int)&amp;#34; 可变参数函数经常被用于格式化字符串。下面的errorf函数构造了一个以行号开头的，经过格式化的错误信息。函数名的后缀f是一种通用的命名规范，代表该可变参数函数可以接收Printf风格的格式化字符串。</description>
    </item>
    
    <item>
      <title>5.8. Deferred函数</title>
      <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.8.-Deferred-Function-Calls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.8.-Deferred-Function-Calls/</guid>
      <description>5.8. Deferred函数 #  在findLinks的例子中，我们用http.Get的输出作为html.Parse的输入。只有url的内容的确是HTML格式的，html.Parse才可以正常工作，但实际上，url指向的内容很丰富，可能是图片，纯文本或是其他。将这些格式的内容传递给html.parse，会产生不良后果。
下面的例子获取HTML页面并输出页面的标题。title函数会检查服务器返回的Content-Type字段，如果发现页面不是HTML，将终止函数运行，返回错误。
gopl.io/ch5/title1
func title(url string) error { resp, err := http.Get(url) if err != nil { return err } // Check Content-Type is HTML (e.g., &amp;#34;text/html;charset=utf-8&amp;#34;). 	ct := resp.Header.Get(&amp;#34;Content-Type&amp;#34;) if ct != &amp;#34;text/html&amp;#34; &amp;amp;&amp;amp; !strings.HasPrefix(ct,&amp;#34;text/html;&amp;#34;) { resp.Body.Close() return fmt.Errorf(&amp;#34;%s has type %s, not text/html&amp;#34;,url, ct) } doc, err := html.Parse(resp.Body) resp.Body.Close() if err != nil { return fmt.Errorf(&amp;#34;parsing %s as HTML: %v&amp;#34;, url,err) } visitNode := func(n *html.</description>
    </item>
    
    <item>
      <title>5.9. Panic异常</title>
      <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.9.-Panic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.9.-Panic/</guid>
      <description>5.9. Panic异常 #  Go的类型系统会在编译时捕获很多错误，但有些错误只能在运行时检查，如数组访问越界、空指针引用等。这些运行时错误会引起painc异常。
一般而言，当panic异常发生时，程序会中断运行，并立即执行在该goroutine（可以先理解成线程，在第8章会详细介绍）中被延迟的函数（defer 机制）。随后，程序崩溃并输出日志信息。日志信息包括panic value和函数调用的堆栈跟踪信息。panic value通常是某种错误信息。对于每个goroutine，日志信息中都会有与之相对的，发生panic时的函数调用堆栈跟踪信息。通常，我们不需要再次运行程序去定位问题，日志信息已经提供了足够的诊断依据。因此，在我们填写问题报告时，一般会将panic异常和日志信息一并记录。
不是所有的panic异常都来自运行时，直接调用内置的panic函数也会引发panic异常；panic函数接受任何值作为参数。当某些不应该发生的场景发生时，我们就应该调用panic。比如，当程序到达了某条逻辑上不可能到达的路径：
switch s := suit(drawCard()); s { case &amp;#34;Spades&amp;#34;: // ... case &amp;#34;Hearts&amp;#34;: // ... case &amp;#34;Diamonds&amp;#34;: // ... case &amp;#34;Clubs&amp;#34;: // ... default: panic(fmt.Sprintf(&amp;#34;invalid suit %q&amp;#34;, s)) // Joker? } 断言函数必须满足的前置条件是明智的做法，但这很容易被滥用。除非你能提供更多的错误信息，或者能更快速的发现错误，否则不需要使用断言，编译器在运行时会帮你检查代码。
func Reset(x *Buffer) { if x == nil { panic(&amp;#34;x is nil&amp;#34;) // unnecessary! 	} x.elements = nil } 虽然Go的panic机制类似于其他语言的异常，但panic的适用场景有一些不同。由于panic会引起程序的崩溃，因此panic一般用于严重错误，如程序内部的逻辑不一致。勤奋的程序员认为任何崩溃都表明代码中存在漏洞，所以对于大部分漏洞，我们应该使用Go提供的错误机制，而不是panic，尽量避免程序的崩溃。在健壮的程序中，任何可以预料到的错误，如不正确的输入、错误的配置或是失败的I/O操作都应该被优雅的处理，最好的处理方式，就是使用Go的错误机制。
考虑regexp.Compile函数，该函数将正则表达式编译成有效的可匹配格式。当输入的正则表达式不合法时，该函数会返回一个错误。当调用者明确的知道正确的输入不会引起函数错误时，要求调用者检查这个错误是不必要和累赘的。我们应该假设函数的输入一直合法，就如前面的断言一样：当调用者输入了不应该出现的输入时，触发panic异常。
在程序源码中，大多数正则表达式是字符串字面值（string literals），因此regexp包提供了包装函数regexp.MustCompile检查输入的合法性。
package regexp func Compile(expr string) (*Regexp, error) { /* .</description>
    </item>
    
    <item>
      <title>5.10. Recover捕获异常</title>
      <link>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.10.-Recover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://book.ninescloud.com/docs/The-Go-Programming-Language/5.-Functions/5.10.-Recover/</guid>
      <description>5.10. Recover捕获异常 #  通常来说，不应该对panic异常做任何处理，但有时，也许我们可以从异常中恢复，至少我们可以在程序崩溃前，做一些操作。举个例子，当web服务器遇到不可预料的严重问题时，在崩溃前应该将所有的连接关闭；如果不做任何处理，会使得客户端一直处于等待状态。如果web服务器还在开发阶段，服务器甚至可以将异常信息反馈到客户端，帮助调试。
如果在deferred函数中调用了内置函数recover，并且定义该defer语句的函数发生了panic异常，recover会使程序从panic中恢复，并返回panic value。导致panic异常的函数不会继续运行，但能正常返回。在未发生panic时调用recover，recover会返回nil。
让我们以语言解析器为例，说明recover的使用场景。考虑到语言解析器的复杂性，即使某个语言解析器目前工作正常，也无法肯定它没有漏洞。因此，当某个异常出现时，我们不会选择让解析器崩溃，而是会将panic异常当作普通的解析错误，并附加额外信息提醒用户报告此错误。
func Parse(input string) (s *Syntax, err error) { defer func() { if p := recover(); p != nil { err = fmt.Errorf(&amp;#34;internal error: %v&amp;#34;, p) } }() // ...parser... } deferred函数帮助Parse从panic中恢复。在deferred函数内部，panic value被附加到错误信息中；并用err变量接收错误信息，返回给调用者。我们也可以通过调用runtime.Stack往错误信息中添加完整的堆栈调用信息。
不加区分的恢复所有的panic异常，不是可取的做法；因为在panic之后，无法保证包级变量的状态仍然和我们预期一致。比如，对数据结构的一次重要更新没有被完整完成、文件或者网络连接没有被关闭、获得的锁没有被释放。此外，如果写日志时产生的panic被不加区分的恢复，可能会导致漏洞被忽略。
虽然把对panic的处理都集中在一个包下，有助于简化对复杂和不可以预料问题的处理，但作为被广泛遵守的规范，你不应该试图去恢复其他包引起的panic。公有的API应该将函数的运行失败作为error返回，而不是panic。同样的，你也不应该恢复一个由他人开发的函数引起的panic，比如说调用者传入的回调函数，因为你无法确保这样做是安全的。
有时我们很难完全遵循规范，举个例子，net/http包中提供了一个web服务器，将收到的请求分发给用户提供的处理函数。很显然，我们不能因为某个处理函数引发的panic异常，杀掉整个进程；web服务器遇到处理函数导致的panic时会调用recover，输出堆栈信息，继续运行。这样的做法在实践中很便捷，但也会引起资源泄漏，或是因为recover操作，导致其他问题。
基于以上原因，安全的做法是有选择性的recover。换句话说，只恢复应该被恢复的panic异常，此外，这些异常所占的比例应该尽可能的低。为了标识某个panic是否应该被恢复，我们可以将panic value设置成特殊类型。在recover时对panic value进行检查，如果发现panic value是特殊类型，就将这个panic作为error处理，如果不是，则按照正常的panic进行处理（在下面的例子中，我们会看到这种方式）。
下面的例子是title函数的变形，如果HTML页面包含多个&amp;lt;title&amp;gt;，该函数会给调用者返回一个错误（error）。在soleTitle内部处理时，如果检测到有多个&amp;lt;title&amp;gt;，会调用panic，阻止函数继续递归，并将特殊类型bailout作为panic的参数。
// soleTitle returns the text of the first non-empty title element // in doc, and an error if there was not exactly one.</description>
    </item>
    
  </channel>
</rss>